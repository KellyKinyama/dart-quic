// Filename: initial_packet_exchange_test.dart
import 'dart:typed_data';
import 'dart:math';
import 'package:hex/hex.dart';

// Import your new, robust components
import 'protocol.dart';
import 'aead.dart';
import 'buffer.dart';
import 'quic_packet_builder.dart';
import 'quic_packet_parser.dart';

/// Main function to simulate and test the QUIC Initial Packet exchange.
void main() {
  print('--- Simulating QUIC Initial Packet Exchange ---');

  // --- 1. Define Connection Parameters ---
  // These would normally be randomly generated by the client.
  final clientDestinationCid = Uint8List.fromList(
    HEX.decode('8394c8f03e515708'),
  );
  final clientSourceCid = Uint8List.fromList(HEX.decode('c9321bf2794a8c2b'));

  // This represents a TLS ClientHello message, which would be the payload.
  final clientPayload = Uint8List.fromList(
    HEX.decode(
      '060040f1010000ed0303ebf8fa56f12939b9584a3896472ec40bb863cfd3e868',
    ),
  );
  final clientPacketNumber = 2;

  // --- 2. Client-Side: Build the Initial Packet ---
  print('\n[Client] Building Initial Packet...');
  final clientInitialPacket = QuicPacketBuilder.buildClientInitialPacket(
    destinationCid: clientDestinationCid,
    sourceCid: clientSourceCid,
    payload: clientPayload,
    packetNumber: clientPacketNumber,
    version: Version.version1,
  );
  print(
    '[Client] Packet built successfully (size: ${clientInitialPacket.length} bytes).',
  );

  // --- 3. Server-Side: Parse and Decrypt the Client's Packet ---
  print('\n[Server] Receiving and parsing Client Initial Packet...');

  // Use the robust parser. The server uses the "server" perspective for decryption.
  parseQuicPacket(clientInitialPacket, Perspective.server);
}
