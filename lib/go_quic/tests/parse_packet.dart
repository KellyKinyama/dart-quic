import 'dart:typed_data';
import 'dart:convert';

// Assuming your files are in a 'go_quic' subdirectory
import '../initial_aead.dart';
import '../protocol.dart';
// import '../aead.dart';

// Helper function to parse QUIC's variable-length integers
(int, int) _parseVarInt(Uint8List bytes) {
  final firstByte = bytes[0];
  final prefix = firstByte >> 6;
  final length = 1 << prefix;

  if (bytes.length < length) {
    throw Exception('Invalid var-int encoding: not enough bytes');
  }

  int value = firstByte & 0x3F;
  for (int i = 1; i < length; i++) {
    value = (value << 8) | bytes[i];
  }
  return (value, length);
}

// Main function to process the packet
void unprotectAndParseInitialPacket(Uint8List packetBytes) {
  print('--- 1. Initial Packet Parsing (Pre-Decryption) ---');
  final buffer = packetBytes.buffer;
  int offset = 0;

  // Make a mutable copy for in-place decryption
  final mutablePacket = Uint8List.fromList(packetBytes);

  // --- Parse Long Header ---
  final firstByte = mutablePacket[offset];
  offset += 1;
  print('Protected First Byte: 0x${firstByte.toRadixString(16)}');

  final version = ByteData.view(buffer, offset, 4).getUint32(0);
  offset += 4;
  print('Version: 0x${version.toRadixString(16)} (QUIC v1)');

  final dcidLen = mutablePacket[offset];
  offset += 1;
  final dcid = Uint8List.view(buffer, offset, dcidLen);
  offset += dcidLen;
  print('DCID Length: $dcidLen');
  print('DCID: ${dcid.map((b) => b.toRadixString(16).padLeft(2, '0')).join()}');

  final scidLen = mutablePacket[offset];
  offset += 1;
  final scid = Uint8List.view(buffer, offset, scidLen);
  offset += scidLen;
  print('SCID Length: $scidLen');

  // Initial packets have a token
  final (tokenLen, tokenLenBytes) = _parseVarInt(mutablePacket.sublist(offset));
  offset += tokenLenBytes;
  final token = Uint8List.view(buffer, offset, tokenLen);
  offset += tokenLen;
  print('Token Length: $tokenLen');

  // The Length field covers the Packet Number and encrypted Payload
  final (lengthField, lengthFieldBytes) = _parseVarInt(
    mutablePacket.sublist(offset),
  );
  offset += lengthFieldBytes;
  print('Length Field (PN + Payload): $lengthField bytes');

  final int pnOffset = offset;
  print('Packet Number starts at offset: $pnOffset');

  print('\n--- 2. Deriving Decryption Keys ---');
  // Since we are the server receiving the packet, our perspective is 'server'
  final (_, opener) = newInitialAEAD(
    dcid,
    Perspective.server,
    Version.version1,
  );
  print('Generated initial AEAD "opener" for the server.');

  print('\n--- 3. Header Unprotection ---');
  // The sample for header protection is taken 4 bytes after the start of the PN field
  final sampleOffset = pnOffset + 4;
  final sample = Uint8List.view(buffer, sampleOffset, 16);
  print('Using sample from offset $sampleOffset: ${sample.sublist(0, 8)}...');

  // The PN field can be up to 4 bytes. We pass a 4-byte view for decryption.
  final protectedPnBytes = mutablePacket.sublist(pnOffset, pnOffset + 4);
  final firstByteView = mutablePacket.sublist(0, 1);

  // This decrypts the first byte and packet number bytes IN-PLACE
  opener.decryptHeader(sample, firstByteView, protectedPnBytes);
  print('Header decryption complete.');

  final unprotectedFirstByte = firstByteView[0];
  print('Unprotected First Byte: 0x${unprotectedFirstByte.toRadixString(16)}');

  // The packet number length is the last 2 bits of the unprotected first byte + 1
  final pnLength = (unprotectedFirstByte & 0x03) + 1;
  print('Decoded Packet Number Length: $pnLength bytes');

  print('\n--- 4. Packet Number Decoding ---');
  final wirePnBytes = protectedPnBytes.sublist(0, pnLength);
  int wirePn = 0;
  for (int i = 0; i < pnLength; i++) {
    wirePn = (wirePn << 8) | wirePnBytes[i];
  }
  print('Decoded Packet Number (on the wire): $wirePn');

  // Reconstruct the full 64-bit packet number
  final fullPacketNumber = opener.decodePacketNumber(wirePn, pnLength);
  print('Reconstructed Full Packet Number: $fullPacketNumber');

  print('\n--- 5. Payload Decryption ---');
  final payloadOffset = pnOffset + pnLength;
  final payloadLength = lengthField - pnLength;

  // Associated Data (AD) is the authenticated portion of the header
  final associatedData = Uint8List.view(mutablePacket.buffer, 0, payloadOffset);
  final ciphertext = Uint8List.view(
    mutablePacket.buffer,
    payloadOffset,
    payloadLength,
  );

  print('Decrypting payload of length: ${ciphertext.length} bytes...');
  final plaintext = opener.open(ciphertext, fullPacketNumber, associatedData);
  print('Payload decrypted successfully!');

  print('\n--- 6. Parsed Payload (CRYPTO Frame) ---');
  if (plaintext.isNotEmpty) {
    final frameType = plaintext[0];
    print('Found Frame Type: 0x${frameType.toRadixString(16)}');
    if (frameType == 0x06) {
      print('This is a CRYPTO frame, carrying handshake data.');
      // Basic CRYPTO frame parsing: Type(1) + Offset(varint) + Length(varint) + Data
      final (offset, offsetLen) = _parseVarInt(plaintext.sublist(1));
      final (length, lengthLen) = _parseVarInt(
        plaintext.sublist(1 + offsetLen),
      );
      final cryptoDataStart = 1 + offsetLen + lengthLen;
      final cryptoData = plaintext.sublist(
        cryptoDataStart,
        cryptoDataStart + length,
      );
      print('CRYPTO Frame Offset: $offset');
      print('CRYPTO Frame Length: $length');
      print(
        'Client Hello Data (first 32 bytes): ${cryptoData.sublist(0, 32)}...',
      );
      // You could now pass this cryptoData to a TLS 1.3 implementation
    }
  }
}

void main() {
  print('Starting QUIC Initial Packet Processing...\n');

  try {
    unprotectAndParseInitialPacket(quicPacketBytes);
  } catch (e, st) {
    print('\nError processing packet: $e, Stack trace: $st');
  }
}

final quicPacketBytes = Uint8List.fromList([
  192,
  0,
  0,
  0,
  1,
  17,
  73,
  123,
  162,
  85,
  69,
  142,
  31,
  64,
  38,
  188,
  154,
  53,
  16,
  158,
  110,
  168,
  14,
  0,
  0,
  68,
  229,
  232,
  94,
  173,
  132,
  54,
  93,
  251,
  48,
  198,
  21,
  21,
  79,
  214,
  92,
  28,
  244,
  190,
  97,
  25,
  68,
  181,
  40,
  219,
  241,
  53,
  49,
  89,
  76,
  12,
  138,
  250,
  225,
  60,
  26,
  34,
  179,
  10,
  168,
  156,
  5,
  252,
  12,
  117,
  171,
  104,
  225,
  253,
  174,
  39,
  241,
  80,
  237,
  20,
  234,
  96,
  169,
  184,
  145,
  109,
  199,
  3,
  237,
  40,
  176,
  167,
  41,
  233,
  23,
  193,
  167,
  252,
  104,
  220,
  74,
  101,
  133,
  241,
  223,
  111,
  99,
  35,
  19,
  20,
  233,
  130,
  153,
  17,
  25,
  93,
  75,
  29,
  249,
  141,
  189,
  43,
  136,
  9,
  129,
  214,
  75,
  94,
  175,
  187,
  246,
  167,
  74,
  19,
  87,
  116,
  65,
  45,
  48,
  134,
  60,
  2,
  68,
  181,
  115,
  201,
  103,
  217,
  167,
  220,
  223,
  104,
  183,
  214,
  189,
  3,
  198,
  46,
  11,
  184,
  199,
  255,
  93,
  43,
  139,
  205,
  191,
  106,
  55,
  122,
  141,
  208,
  25,
  27,
  147,
  100,
  166,
  55,
  248,
  46,
  51,
  61,
  130,
  134,
  202,
  2,
  77,
  66,
  67,
  242,
  1,
  238,
  142,
  46,
  72,
  228,
  16,
  253,
  18,
  79,
  65,
  149,
  221,
  133,
  194,
  159,
  241,
  113,
  179,
  5,
  35,
  175,
  67,
  94,
  53,
  223,
  66,
  174,
  6,
  33,
  41,
  199,
  213,
  13,
  225,
  200,
  255,
  214,
  152,
  51,
  39,
  35,
  117,
  80,
  218,
  102,
  81,
  218,
  245,
  106,
  74,
  189,
  16,
  235,
  148,
  40,
  129,
  136,
  33,
  101,
  180,
  32,
  23,
  84,
  4,
  248,
  144,
  205,
  223,
  111,
  127,
  54,
  124,
  209,
  148,
  244,
  188,
  149,
  150,
  155,
  100,
  212,
  121,
  197,
  43,
  21,
  164,
  239,
  119,
  250,
  247,
  83,
  38,
  144,
  20,
  46,
  85,
  89,
  74,
  171,
  82,
  94,
  46,
  44,
  15,
  28,
  9,
  223,
  224,
  51,
  92,
  112,
  24,
  180,
  76,
  12,
  133,
  99,
  62,
  9,
  93,
  14,
  118,
  117,
  158,
  30,
  116,
  64,
  76,
  145,
  172,
  37,
  223,
  120,
  49,
  54,
  154,
  212,
  92,
  29,
  248,
  135,
  36,
  129,
  194,
  148,
  128,
  242,
  75,
  248,
  117,
  13,
  30,
  74,
  218,
  248,
  238,
  107,
  191,
  198,
  44,
  178,
  162,
  196,
  125,
  32,
  174,
  30,
  73,
  223,
  224,
  162,
  241,
  203,
  215,
  182,
  44,
  234,
  196,
  158,
  2,
  203,
  103,
  198,
  148,
  0,
  123,
  78,
  46,
  138,
  162,
  97,
  189,
  28,
  8,
  182,
  144,
  114,
  218,
  218,
  92,
  124,
  242,
  94,
  42,
  218,
  126,
  16,
  59,
  181,
  7,
  41,
  35,
  193,
  198,
  49,
  214,
  10,
  40,
  137,
  101,
  173,
  2,
  238,
  194,
  124,
  17,
  66,
  67,
  140,
  251,
  106,
  41,
  70,
  43,
  62,
  105,
  33,
  46,
  54,
  22,
  144,
  12,
  59,
  204,
  18,
  157,
  51,
  38,
  181,
  151,
  234,
  198,
  185,
  227,
  17,
  212,
  171,
  90,
  137,
  233,
  152,
  198,
  205,
  15,
  99,
  231,
  128,
  102,
  26,
  188,
  1,
  237,
  138,
  203,
  5,
  49,
  212,
  150,
  51,
  252,
  63,
  205,
  119,
  57,
  148,
  32,
  148,
  214,
  3,
  210,
  88,
  9,
  101,
  248,
  22,
  235,
  24,
  242,
  100,
  0,
  182,
  53,
  133,
  35,
  103,
  190,
  149,
  65,
  207,
  0,
  6,
  233,
  252,
  48,
  84,
  211,
  120,
  66,
  112,
  190,
  223,
  25,
  233,
  208,
  186,
  52,
  152,
  69,
  95,
  227,
  191,
  99,
  173,
  48,
  218,
  151,
  197,
  29,
  220,
  114,
  211,
  89,
  236,
  130,
  28,
  202,
  238,
  82,
  162,
  76,
  72,
  144,
  0,
  61,
  225,
  202,
  19,
  8,
  95,
  251,
  98,
  2,
  69,
  111,
  233,
  209,
  94,
  67,
  178,
  239,
  101,
  4,
  179,
  136,
  129,
  143,
  170,
  61,
  129,
  67,
  57,
  160,
  96,
  98,
  47,
  65,
  15,
  102,
  106,
  250,
  19,
  2,
  207,
  223,
  236,
  237,
  221,
  114,
  72,
  49,
  33,
  39,
  51,
  165,
  184,
  224,
  130,
  61,
  34,
  117,
  114,
  103,
  39,
  28,
  173,
  19,
  64,
  179,
  248,
  94,
  210,
  69,
  235,
  45,
  131,
  170,
  10,
  218,
  95,
  122,
  170,
  58,
  151,
  46,
  152,
  42,
  1,
  193,
  207,
  168,
  181,
  48,
  31,
  201,
  64,
  239,
  177,
  191,
  61,
  174,
  118,
  6,
  242,
  130,
  174,
  101,
  31,
  219,
  93,
  190,
  237,
  167,
  38,
  188,
  121,
  119,
  39,
  5,
  113,
  74,
  141,
  210,
  197,
  64,
  208,
  103,
  225,
  227,
  117,
  240,
  18,
  164,
  118,
  50,
  35,
  40,
  104,
  94,
  22,
  26,
  142,
  55,
  133,
  253,
  207,
  243,
  116,
  134,
  54,
  55,
  102,
  101,
  89,
  201,
  194,
  177,
  105,
  113,
  206,
  207,
  41,
  92,
  176,
  217,
  140,
  122,
  161,
  134,
  82,
  94,
  151,
  157,
  136,
  17,
  27,
  61,
  121,
  130,
  76,
  90,
  205,
  130,
  161,
  207,
  27,
  14,
  49,
  164,
  156,
  85,
  164,
  115,
  68,
  53,
  178,
  177,
  99,
  157,
  26,
  111,
  184,
  56,
  182,
  44,
  20,
  14,
  229,
  48,
  61,
  235,
  127,
  149,
  129,
  96,
  185,
  194,
  152,
  141,
  161,
  199,
  205,
  123,
  246,
  255,
  63,
  216,
  19,
  157,
  239,
  3,
  130,
  135,
  139,
  32,
  173,
  209,
  174,
  209,
  70,
  82,
  189,
  243,
  156,
  43,
  33,
  39,
  164,
  213,
  104,
  144,
  225,
  140,
  67,
  229,
  48,
  23,
  240,
  224,
  144,
  168,
  70,
  77,
  163,
  213,
  41,
  0,
  197,
  81,
  86,
  72,
  158,
  13,
  232,
  2,
  144,
  197,
  154,
  213,
  110,
  67,
  74,
  187,
  136,
  93,
  0,
  82,
  44,
  207,
  58,
  16,
  93,
  163,
  91,
  253,
  57,
  135,
  85,
  177,
  224,
  57,
  43,
  91,
  132,
  147,
  46,
  169,
  145,
  30,
  159,
  25,
  65,
  105,
  162,
  216,
  4,
  253,
  3,
  20,
  36,
  198,
  52,
  125,
  139,
  1,
  140,
  187,
  255,
  26,
  197,
  195,
  141,
  108,
  135,
  48,
  60,
  91,
  28,
  131,
  44,
  160,
  216,
  52,
  106,
  87,
  174,
  169,
  181,
  36,
  128,
  227,
  84,
  243,
  236,
  138,
  68,
  169,
  198,
  185,
  75,
  121,
  75,
  168,
  38,
  100,
  130,
  226,
  115,
  9,
  178,
  31,
  89,
  178,
  188,
  86,
  77,
  8,
  100,
  247,
  143,
  174,
  110,
  10,
  171,
  225,
  39,
  208,
  91,
  96,
  150,
  100,
  247,
  137,
  167,
  84,
  82,
  51,
  1,
  158,
  62,
  3,
  110,
  117,
  236,
  8,
  138,
  67,
  173,
  62,
  25,
  209,
  150,
  215,
  203,
  26,
  172,
  45,
  231,
  79,
  101,
  147,
  193,
  48,
  214,
  210,
  231,
  222,
  132,
  239,
  173,
  173,
  116,
  178,
  64,
  151,
  63,
  98,
  5,
  24,
  56,
  147,
  200,
  245,
  205,
  55,
  63,
  116,
  44,
  177,
  127,
  37,
  121,
  67,
  119,
  207,
  23,
  174,
  60,
  219,
  134,
  179,
  234,
  13,
  153,
  213,
  252,
  65,
  212,
  109,
  224,
  164,
  76,
  208,
  41,
  15,
  217,
  144,
  1,
  173,
  10,
  94,
  1,
  153,
  197,
  215,
  113,
  58,
  24,
  53,
  0,
  199,
  0,
  124,
  225,
  227,
  176,
  73,
  82,
  149,
  144,
  9,
  37,
  245,
  176,
  13,
  200,
  38,
  64,
  0,
  102,
  78,
  229,
  155,
  219,
  236,
  17,
  117,
  227,
  23,
  225,
  53,
  20,
  12,
  227,
  81,
  242,
  108,
  80,
  11,
  160,
  232,
  160,
  20,
  83,
  204,
  169,
  34,
  214,
  85,
  25,
  7,
  61,
  188,
  231,
  199,
  75,
  60,
  80,
  245,
  252,
  208,
  164,
  61,
  40,
  234,
  228,
  30,
  179,
  146,
  166,
  166,
  24,
  97,
  22,
  167,
  28,
  19,
  237,
  130,
  47,
  140,
  192,
  242,
  61,
  207,
  176,
  18,
  70,
  189,
  13,
  155,
  80,
  226,
  140,
  14,
  164,
  100,
  202,
  20,
  192,
  67,
  46,
  11,
  55,
  90,
  136,
  150,
  210,
  98,
  248,
  243,
  170,
  162,
  210,
  251,
  25,
  147,
  43,
  31,
  218,
  143,
  230,
  187,
  96,
  96,
  56,
  140,
  211,
  14,
  84,
  139,
  210,
  138,
  110,
  80,
  150,
  200,
  15,
  74,
  208,
  42,
  154,
  29,
  181,
  42,
  87,
  121,
  75,
  104,
  128,
  81,
  131,
  152,
  53,
  122,
  21,
  168,
  69,
  10,
  138,
  238,
  144,
  215,
  216,
  112,
  67,
  246,
  207,
  8,
  67,
  71,
  213,
  226,
  36,
  240,
  90,
  125,
  9,
  78,
  247,
  85,
  199,
  106,
  172,
  52,
  88,
  222,
  2,
  140,
  178,
  229,
  46,
  6,
  246,
  148,
  145,
  200,
  143,
  166,
  117,
  91,
  233,
  184,
  242,
  124,
  216,
  56,
  59,
  254,
  31,
  64,
  141,
  3,
  185,
  176,
  209,
  231,
  193,
  80,
  5,
  177,
  227,
  47,
  145,
  146,
  184,
  198,
  57,
  169,
  183,
  21,
  184,
  116,
  129,
  197,
  187,
  249,
  101,
  175,
  116,
  136,
  132,
  166,
  196,
  179,
  13,
  156,
  249,
  41,
  149,
]);
