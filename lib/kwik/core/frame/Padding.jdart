/*
 * Copyright Â© 2019, 2020, 2021, 2022, 2023, 2024, 2025 Peter Doornbosch
 *
 * This file is part of Kwik, an implementation of the QUIC protocol in Java.
 *
 * Kwik is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * Kwik is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package tech.kwik.core.frame;

import tech.kwik.core.log.Logger;
import tech.kwik.core.packet.PacketMetaData;
import tech.kwik.core.packet.QuicPacket;

import java.nio.ByteBuffer;

/**
 * Represents a number of consecutive padding frames.
 * https://www.rfc-editor.org/rfc/rfc9000.html#name-padding-frames
 *
 * Usually, padding will consist of multiple padding frames, each being exactly one (zero) byte. This class can
 * represent an arbitrary number of consecutive padding frames, by recording padding length.
 */
class Padding extends QuicFrame {

    int length;

    Padding() {
    }

    Padding(int paddingSize) {
        length = paddingSize;
    }

    @Override
    int getFrameLength() {
        return length;
    }

    @Override
    void serialize(ByteBuffer buffer) {
        buffer.put(new byte[length]);
    }

    /**
     * Strictly speaking, a padding frame consists of one single byte. For convenience, here all subsequent padding
     * bytes are collected in one padding object.
     * @param buffer
     * @param log
     * @return
     */
    Padding parse(ByteBuffer buffer, Logger log) {
        byte lastByte = 0;
        while (buffer.position() < buffer.limit() && (lastByte = buffer.get()) == 0)
            length++;

        if (lastByte != 0) {
            // Set back one position
            buffer.position(buffer.position() - 1);
        }

        return this;
    }

    // https://tools.ietf.org/html/draft-ietf-quic-recovery-33#section-2
    // "All frames other than ACK, PADDING, and CONNECTION_CLOSE are considered ack-eliciting."
    @Override
     bool isAckEliciting() {
        return false;
    }

    @Override
    String toString() {
        return "Padding(" + length + ")";
    }

    int getLength() {
        return length;
    }

    @Override
    void accept(FrameProcessor frameProcessor, QuicPacket packet, PacketMetaData metaData) {
        frameProcessor.process(this, packet, metaData);
    }
}
