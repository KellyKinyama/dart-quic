import 'dart:typed_data';

import 'quic_long_header.dart';
import 'var_length.dart';

// Helper for reading/writing QUIC variable-length integers (varints)
// This is a simplified implementation for illustration.
// A robust version would handle all 4 varint lengths and potential errors.
// class VarInt {
//   static int read(Uint8List data, int offset) {
//     if (offset >= data.length) {
//       throw FormatException('Attempted to read varint beyond data bounds.');
//     }
//     final firstByte = data[offset];
//     final prefix = (firstByte >> 6) & 0x03;
//     int value;
//     int bytesRead;

//     if (prefix == 0x00) {
//       // 1-byte varint
//       value = firstByte & 0x3F;
//       bytesRead = 1;
//     } else if (prefix == 0x01) {
//       // 2-byte varint
//       if (offset + 1 >= data.length)
//         throw FormatException('Incomplete 2-byte varint.');
//       value = data.buffer.asByteData().getUint16(offset) & 0x3FFF;
//       bytesRead = 2;
//     } else if (prefix == 0x02) {
//       // 4-byte varint
//       if (offset + 3 >= data.length)
//         throw FormatException('Incomplete 4-byte varint.');
//       value = data.buffer.asByteData().getUint32(offset) & 0x3FFFFFFF;
//       bytesRead = 4;
//     } else if (prefix == 0x03) {
//       // 8-byte varint
//       if (offset + 7 >= data.length)
//         throw FormatException('Incomplete 8-byte varint.');
//       // Dart's int can handle up to 63 bits, so Uint64 works for 62-bit varint
//       value = data.buffer.asByteData().getUint64(offset) & 0x3FFFFFFFFFFFFFFF;
//       bytesRead = 8;
//     } else {
//       throw FormatException('Invalid varint prefix: $prefix');
//     }
//     return value;
//   }

//   static Uint8List write(int value) {
//     final builder = BytesBuilder();
//     if (value < (1 << 6)) {
//       // 1-byte
//       builder.addByte(value & 0x3F);
//     } else if (value < (1 << 14)) {
//       // 2-byte
//       builder.add(
//         Uint8List(2)..buffer.asByteData().setUint16(0, value | 0x4000),
//       );
//     } else if (value < (1 << 30)) {
//       // 4-byte
//       builder.add(
//         Uint8List(4)..buffer.asByteData().setUint32(0, value | 0x80000000),
//       );
//     } else if (value < (1 << 62)) {
//       // 8-byte
//       builder.add(
//         Uint8List(8)
//           ..buffer.asByteData().setUint64(0, value | 0xC000000000000000),
//       );
//     } else {
//       throw ArgumentError(
//         'Value $value is too large for a QUIC varint (max 2^62 - 1).',
//       );
//     }
//     return builder.toBytes();
//   }

//   // Determine the number of bytes a varint will occupy when written.
//   static int getLength(int value) {
//     if (value < (1 << 6)) return 1;
//     if (value < (1 << 14)) return 2;
//     if (value < (1 << 30)) return 4;
//     if (value < (1 << 62)) return 8;
//     throw ArgumentError(
//       'Value $value is too large for a QUIC varint (max 2^62 - 1).',
//     );
//   }
// }

class QuicInitialPacketHeader extends QuicLongHeader {
  final int reservedBits;
  final int
  packetNumberLengthBits; // The 'Packet Number Length' in the first byte
  final int tokenLength; // This is a varint
  final Uint8List? token;
  final int
  length; // This is a varint, the total length of the packet number + payload
  final int
  packetNumber; // This is a varint, actual length determined by packetNumberLengthBits
  final Uint8List packetPayload;

  QuicInitialPacketHeader({
    required super.headerForm,
    required super.fixedBit,
    required super.longPacketType,
    required this.reservedBits,
    required this.packetNumberLengthBits, // Using 'Bits' to distinguish from byte length
    required super.version,
    required super.destConnectionIdLength,
    super.destConnectionId,
    required super.sourceConnectionIdLength,
    super.sourceConnectionId,
    required this.tokenLength,
    this.token,
    required this.length,
    required this.packetNumber,
    required this.packetPayload,
  }) : super(typeSpecificBits: (reservedBits << 2) | packetNumberLengthBits);

  factory QuicInitialPacketHeader.parse(Uint8List data) {
    int offset = 0;
    final firstByte = data[offset++];

    final headerForm = (firstByte >> 7) & 0x01;
    final fixedBit = (firstByte >> 6) & 0x01;
    final longPacketType =
        (firstByte >> 4) & 0x03; // Should be 0 for Initial Packet Type
    final reservedBits = (firstByte >> 2) & 0x03;
    final packetNumberLengthBits =
        firstByte & 0x03; // Low order 2 bits, indicates byte length

    final version = data.buffer.asByteData().getUint32(offset);
    offset += 4;

    final destConnectionIdLength = data[offset++];
    Uint8List? destConnectionId;
    if (destConnectionIdLength > 0) {
      destConnectionId = data.sublist(offset, offset + destConnectionIdLength);
      offset += destConnectionIdLength;
    }

    final sourceConnectionIdLength = data[offset++];
    Uint8List? sourceConnectionId;
    if (sourceConnectionIdLength > 0) {
      sourceConnectionId = data.sublist(
        offset,
        offset + sourceConnectionIdLength,
      );
      offset += sourceConnectionIdLength;
    }

    // Parse Token Length (varint)
    Map<String, int> packetLengthResult = VarInt.read(data, offset);
    // final tokenLength = VarInt.read(data, offset);

    final tokenLength = packetLengthResult['value']!;
    offset += packetLengthResult['bytesRead']!;
    // offset += VarInt.getLength(tokenLength); // Advance by actual varint length

    Uint8List? token;
    if (tokenLength > 0) {
      token = data.sublist(offset, offset + tokenLength);
      offset += tokenLength;
    }

    // Parse Length (varint) - this is the total length of the Packet Number and Packet Payload
    packetLengthResult = VarInt.read(data, offset);
    final length = packetLengthResult['value']!;
    offset += packetLengthResult['bytesRead']!;

    // Parse Packet Number (length determined by packetNumberLengthBits)
    final packetNumberByteLength =
        1 << packetNumberLengthBits; // 0->1, 1->2, 2->4, 3->8 bytes
    int packetNumber;
    switch (packetNumberByteLength) {
      case 1:
        packetNumber = data[offset];
        break;
      case 2:
        packetNumber = data.buffer.asByteData().getUint16(offset);
        break;
      case 4:
        packetNumber = data.buffer.asByteData().getUint32(offset);
        break;
      case 8:
        packetNumber = data.buffer.asByteData().getUint64(offset);
        break;
      default:
        throw FormatException(
          'Invalid packet number byte length derived from bits: $packetNumberByteLength',
        );
    }
    offset += packetNumberByteLength;

    final packetPayload = data.sublist(offset);

    return QuicInitialPacketHeader(
      headerForm: headerForm,
      fixedBit: fixedBit,
      longPacketType: longPacketType,
      reservedBits: reservedBits,
      packetNumberLengthBits: packetNumberLengthBits,
      version: version,
      destConnectionIdLength: destConnectionIdLength,
      destConnectionId: destConnectionId,
      sourceConnectionIdLength: sourceConnectionIdLength,
      sourceConnectionId: sourceConnectionId,
      tokenLength: tokenLength,
      token: token,
      length: length,
      packetNumber: packetNumber,
      packetPayload: packetPayload,
    );
  }

  @override
  Uint8List toBytes() {
    final builder = BytesBuilder();
    int firstByte =
        (headerForm << 7) |
        (fixedBit << 6) |
        (longPacketType << 4) |
        (reservedBits << 2) |
        packetNumberLengthBits;
    builder.addByte(firstByte);
    builder.add(Uint8List(4)..buffer.asByteData().setUint32(0, version));
    builder.addByte(destConnectionIdLength);
    if (destConnectionId != null) {
      builder.add(destConnectionId!);
    }
    builder.addByte(sourceConnectionIdLength);
    if (sourceConnectionId != null) {
      builder.add(sourceConnectionId!);
    }

    // Add Token Length (varint) and Token
    builder.add(VarInt.write(tokenLength));
    if (token != null) {
      builder.add(token!);
    }

    // Add Length (varint)
    builder.add(VarInt.write(length));

    // Add Packet Number (based on packetNumberLengthBits)
    final packetNumberByteLength = 1 << packetNumberLengthBits;
    switch (packetNumberByteLength) {
      case 1:
        builder.addByte(packetNumber);
        break;
      case 2:
        builder.add(
          Uint8List(2)..buffer.asByteData().setUint16(0, packetNumber),
        );
        break;
      case 4:
        builder.add(
          Uint8List(4)..buffer.asByteData().setUint32(0, packetNumber),
        );
        break;
      case 8:
        builder.add(
          Uint8List(8)..buffer.asByteData().setUint64(0, packetNumber),
        );
        break;
    }

    builder.add(packetPayload);
    return builder.toBytes();
  }

  @override
  String toString() {
    return 'QuicInitialPacketHeader(headerForm: $headerForm, fixedBit: $fixedBit, longPacketType: $longPacketType, reservedBits: $reservedBits, packetNumberLengthBits: $packetNumberLengthBits, version: 0x${version.toRadixString(16)}, destConnectionIdLength: $destConnectionIdLength, destConnectionId: ${destConnectionId?.map((b) => b.toRadixString(16).padLeft(2, '0')).join()}, sourceConnectionIdLength: $sourceConnectionIdLength, sourceConnectionId: ${sourceConnectionId?.map((b) => b.toRadixString(16).padLeft(2, '0')).join()}, tokenLength: $tokenLength, token: ${token?.map((b) => b.toRadixString(16).padLeft(2, '0')).join()}, length: $length, packetNumber: $packetNumber, packetPayloadLength: ${packetPayload.length})';
  }
}

void main() {
  print("Quick packet: ${QuicInitialPacketHeader.parse(quicPacketBytes)}");
}

final quicPacketBytes = Uint8List.fromList([
  192,
  0,
  0,
  0,
  1,
  17,
  73,
  123,
  162,
  85,
  69,
  142,
  31,
  64,
  38,
  188,
  154,
  53,
  16,
  158,
  110,
  168,
  14,
  0,
  0,
  68,
  229,
  232,
  94,
  173,
  132,
  54,
  93,
  251,
  48,
  198,
  21,
  21,
  79,
  214,
  92,
  28,
  244,
  190,
  97,
  25,
  68,
  181,
  40,
  219,
  241,
  53,
  49,
  89,
  76,
  12,
  138,
  250,
  225,
  60,
  26,
  34,
  179,
  10,
  168,
  156,
  5,
  252,
  12,
  117,
  171,
  104,
  225,
  253,
  174,
  39,
  241,
  80,
  237,
  20,
  234,
  96,
  169,
  184,
  145,
  109,
  199,
  3,
  237,
  40,
  176,
  167,
  41,
  233,
  23,
  193,
  167,
  252,
  104,
  220,
  74,
  101,
  133,
  241,
  223,
  111,
  99,
  35,
  19,
  20,
  233,
  130,
  153,
  17,
  25,
  93,
  75,
  29,
  249,
  141,
  189,
  43,
  136,
  9,
  129,
  214,
  75,
  94,
  175,
  187,
  246,
  167,
  74,
  19,
  87,
  116,
  65,
  45,
  48,
  134,
  60,
  2,
  68,
  181,
  115,
  201,
  103,
  217,
  167,
  220,
  223,
  104,
  183,
  214,
  189,
  3,
  198,
  46,
  11,
  184,
  199,
  255,
  93,
  43,
  139,
  205,
  191,
  106,
  55,
  122,
  141,
  208,
  25,
  27,
  147,
  100,
  166,
  55,
  248,
  46,
  51,
  61,
  130,
  134,
  202,
  2,
  77,
  66,
  67,
  242,
  1,
  238,
  142,
  46,
  72,
  228,
  16,
  253,
  18,
  79,
  65,
  149,
  221,
  133,
  194,
  159,
  241,
  113,
  179,
  5,
  35,
  175,
  67,
  94,
  53,
  223,
  66,
  174,
  6,
  33,
  41,
  199,
  213,
  13,
  225,
  200,
  255,
  214,
  152,
  51,
  39,
  35,
  117,
  80,
  218,
  102,
  81,
  218,
  245,
  106,
  74,
  189,
  16,
  235,
  148,
  40,
  129,
  136,
  33,
  101,
  180,
  32,
  23,
  84,
  4,
  248,
  144,
  205,
  223,
  111,
  127,
  54,
  124,
  209,
  148,
  244,
  188,
  149,
  150,
  155,
  100,
  212,
  121,
  197,
  43,
  21,
  164,
  239,
  119,
  250,
  247,
  83,
  38,
  144,
  20,
  46,
  85,
  89,
  74,
  171,
  82,
  94,
  46,
  44,
  15,
  28,
  9,
  223,
  224,
  51,
  92,
  112,
  24,
  180,
  76,
  12,
  133,
  99,
  62,
  9,
  93,
  14,
  118,
  117,
  158,
  30,
  116,
  64,
  76,
  145,
  172,
  37,
  223,
  120,
  49,
  54,
  154,
  212,
  92,
  29,
  248,
  135,
  36,
  129,
  194,
  148,
  128,
  242,
  75,
  248,
  117,
  13,
  30,
  74,
  218,
  248,
  238,
  107,
  191,
  198,
  44,
  178,
  162,
  196,
  125,
  32,
  174,
  30,
  73,
  223,
  224,
  162,
  241,
  203,
  215,
  182,
  44,
  234,
  196,
  158,
  2,
  203,
  103,
  198,
  148,
  0,
  123,
  78,
  46,
  138,
  162,
  97,
  189,
  28,
  8,
  182,
  144,
  114,
  218,
  218,
  92,
  124,
  242,
  94,
  42,
  218,
  126,
  16,
  59,
  181,
  7,
  41,
  35,
  193,
  198,
  49,
  214,
  10,
  40,
  137,
  101,
  173,
  2,
  238,
  194,
  124,
  17,
  66,
  67,
  140,
  251,
  106,
  41,
  70,
  43,
  62,
  105,
  33,
  46,
  54,
  22,
  144,
  12,
  59,
  204,
  18,
  157,
  51,
  38,
  181,
  151,
  234,
  198,
  185,
  227,
  17,
  212,
  171,
  90,
  137,
  233,
  152,
  198,
  205,
  15,
  99,
  231,
  128,
  102,
  26,
  188,
  1,
  237,
  138,
  203,
  5,
  49,
  212,
  150,
  51,
  252,
  63,
  205,
  119,
  57,
  148,
  32,
  148,
  214,
  3,
  210,
  88,
  9,
  101,
  248,
  22,
  235,
  24,
  242,
  100,
  0,
  182,
  53,
  133,
  35,
  103,
  190,
  149,
  65,
  207,
  0,
  6,
  233,
  252,
  48,
  84,
  211,
  120,
  66,
  112,
  190,
  223,
  25,
  233,
  208,
  186,
  52,
  152,
  69,
  95,
  227,
  191,
  99,
  173,
  48,
  218,
  151,
  197,
  29,
  220,
  114,
  211,
  89,
  236,
  130,
  28,
  202,
  238,
  82,
  162,
  76,
  72,
  144,
  0,
  61,
  225,
  202,
  19,
  8,
  95,
  251,
  98,
  2,
  69,
  111,
  233,
  209,
  94,
  67,
  178,
  239,
  101,
  4,
  179,
  136,
  129,
  143,
  170,
  61,
  129,
  67,
  57,
  160,
  96,
  98,
  47,
  65,
  15,
  102,
  106,
  250,
  19,
  2,
  207,
  223,
  236,
  237,
  221,
  114,
  72,
  49,
  33,
  39,
  51,
  165,
  184,
  224,
  130,
  61,
  34,
  117,
  114,
  103,
  39,
  28,
  173,
  19,
  64,
  179,
  248,
  94,
  210,
  69,
  235,
  45,
  131,
  170,
  10,
  218,
  95,
  122,
  170,
  58,
  151,
  46,
  152,
  42,
  1,
  193,
  207,
  168,
  181,
  48,
  31,
  201,
  64,
  239,
  177,
  191,
  61,
  174,
  118,
  6,
  242,
  130,
  174,
  101,
  31,
  219,
  93,
  190,
  237,
  167,
  38,
  188,
  121,
  119,
  39,
  5,
  113,
  74,
  141,
  210,
  197,
  64,
  208,
  103,
  225,
  227,
  117,
  240,
  18,
  164,
  118,
  50,
  35,
  40,
  104,
  94,
  22,
  26,
  142,
  55,
  133,
  253,
  207,
  243,
  116,
  134,
  54,
  55,
  102,
  101,
  89,
  201,
  194,
  177,
  105,
  113,
  206,
  207,
  41,
  92,
  176,
  217,
  140,
  122,
  161,
  134,
  82,
  94,
  151,
  157,
  136,
  17,
  27,
  61,
  121,
  130,
  76,
  90,
  205,
  130,
  161,
  207,
  27,
  14,
  49,
  164,
  156,
  85,
  164,
  115,
  68,
  53,
  178,
  177,
  99,
  157,
  26,
  111,
  184,
  56,
  182,
  44,
  20,
  14,
  229,
  48,
  61,
  235,
  127,
  149,
  129,
  96,
  185,
  194,
  152,
  141,
  161,
  199,
  205,
  123,
  246,
  255,
  63,
  216,
  19,
  157,
  239,
  3,
  130,
  135,
  139,
  32,
  173,
  209,
  174,
  209,
  70,
  82,
  189,
  243,
  156,
  43,
  33,
  39,
  164,
  213,
  104,
  144,
  225,
  140,
  67,
  229,
  48,
  23,
  240,
  224,
  144,
  168,
  70,
  77,
  163,
  213,
  41,
  0,
  197,
  81,
  86,
  72,
  158,
  13,
  232,
  2,
  144,
  197,
  154,
  213,
  110,
  67,
  74,
  187,
  136,
  93,
  0,
  82,
  44,
  207,
  58,
  16,
  93,
  163,
  91,
  253,
  57,
  135,
  85,
  177,
  224,
  57,
  43,
  91,
  132,
  147,
  46,
  169,
  145,
  30,
  159,
  25,
  65,
  105,
  162,
  216,
  4,
  253,
  3,
  20,
  36,
  198,
  52,
  125,
  139,
  1,
  140,
  187,
  255,
  26,
  197,
  195,
  141,
  108,
  135,
  48,
  60,
  91,
  28,
  131,
  44,
  160,
  216,
  52,
  106,
  87,
  174,
  169,
  181,
  36,
  128,
  227,
  84,
  243,
  236,
  138,
  68,
  169,
  198,
  185,
  75,
  121,
  75,
  168,
  38,
  100,
  130,
  226,
  115,
  9,
  178,
  31,
  89,
  178,
  188,
  86,
  77,
  8,
  100,
  247,
  143,
  174,
  110,
  10,
  171,
  225,
  39,
  208,
  91,
  96,
  150,
  100,
  247,
  137,
  167,
  84,
  82,
  51,
  1,
  158,
  62,
  3,
  110,
  117,
  236,
  8,
  138,
  67,
  173,
  62,
  25,
  209,
  150,
  215,
  203,
  26,
  172,
  45,
  231,
  79,
  101,
  147,
  193,
  48,
  214,
  210,
  231,
  222,
  132,
  239,
  173,
  173,
  116,
  178,
  64,
  151,
  63,
  98,
  5,
  24,
  56,
  147,
  200,
  245,
  205,
  55,
  63,
  116,
  44,
  177,
  127,
  37,
  121,
  67,
  119,
  207,
  23,
  174,
  60,
  219,
  134,
  179,
  234,
  13,
  153,
  213,
  252,
  65,
  212,
  109,
  224,
  164,
  76,
  208,
  41,
  15,
  217,
  144,
  1,
  173,
  10,
  94,
  1,
  153,
  197,
  215,
  113,
  58,
  24,
  53,
  0,
  199,
  0,
  124,
  225,
  227,
  176,
  73,
  82,
  149,
  144,
  9,
  37,
  245,
  176,
  13,
  200,
  38,
  64,
  0,
  102,
  78,
  229,
  155,
  219,
  236,
  17,
  117,
  227,
  23,
  225,
  53,
  20,
  12,
  227,
  81,
  242,
  108,
  80,
  11,
  160,
  232,
  160,
  20,
  83,
  204,
  169,
  34,
  214,
  85,
  25,
  7,
  61,
  188,
  231,
  199,
  75,
  60,
  80,
  245,
  252,
  208,
  164,
  61,
  40,
  234,
  228,
  30,
  179,
  146,
  166,
  166,
  24,
  97,
  22,
  167,
  28,
  19,
  237,
  130,
  47,
  140,
  192,
  242,
  61,
  207,
  176,
  18,
  70,
  189,
  13,
  155,
  80,
  226,
  140,
  14,
  164,
  100,
  202,
  20,
  192,
  67,
  46,
  11,
  55,
  90,
  136,
  150,
  210,
  98,
  248,
  243,
  170,
  162,
  210,
  251,
  25,
  147,
  43,
  31,
  218,
  143,
  230,
  187,
  96,
  96,
  56,
  140,
  211,
  14,
  84,
  139,
  210,
  138,
  110,
  80,
  150,
  200,
  15,
  74,
  208,
  42,
  154,
  29,
  181,
  42,
  87,
  121,
  75,
  104,
  128,
  81,
  131,
  152,
  53,
  122,
  21,
  168,
  69,
  10,
  138,
  238,
  144,
  215,
  216,
  112,
  67,
  246,
  207,
  8,
  67,
  71,
  213,
  226,
  36,
  240,
  90,
  125,
  9,
  78,
  247,
  85,
  199,
  106,
  172,
  52,
  88,
  222,
  2,
  140,
  178,
  229,
  46,
  6,
  246,
  148,
  145,
  200,
  143,
  166,
  117,
  91,
  233,
  184,
  242,
  124,
  216,
  56,
  59,
  254,
  31,
  64,
  141,
  3,
  185,
  176,
  209,
  231,
  193,
  80,
  5,
  177,
  227,
  47,
  145,
  146,
  184,
  198,
  57,
  169,
  183,
  21,
  184,
  116,
  129,
  197,
  187,
  249,
  101,
  175,
  116,
  136,
  132,
  166,
  196,
  179,
  13,
  156,
  249,
  41,
  149,
]);
